{"ast":null,"code":"import { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable } from '@angular/material/table';\nimport { OrdersTableDataSource } from './orders-table-datasource';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/table\";\nimport * as i2 from \"@angular/material/sort\";\nimport * as i3 from \"@angular/material/grid-list\";\nimport * as i4 from \"../card/card.component\";\nimport * as i5 from \"@angular/material/paginator\";\nimport * as i6 from \"@angular/common\";\n\nfunction OrdersTableComponent_th_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 12);\n    i0.ɵɵtext(1, \"Id\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction OrdersTableComponent_td_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r7.id);\n  }\n}\n\nfunction OrdersTableComponent_th_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 12);\n    i0.ɵɵtext(1, \"Name\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction OrdersTableComponent_td_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r8.name);\n  }\n}\n\nfunction OrdersTableComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n\nfunction OrdersTableComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 15);\n  }\n}\n\nconst _c0 = function () {\n  return [5, 10, 20];\n};\n\nexport class OrdersTableComponent {\n  constructor() {\n    /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n    this.displayedColumns = ['id', 'name'];\n    this.dataSource = new OrdersTableDataSource();\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.table.dataSource = this.dataSource;\n  }\n\n}\n\nOrdersTableComponent.ɵfac = function OrdersTableComponent_Factory(t) {\n  return new (t || OrdersTableComponent)();\n};\n\nOrdersTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OrdersTableComponent,\n  selectors: [[\"app-orders-table\"]],\n  viewQuery: function OrdersTableComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatPaginator, 5);\n      i0.ɵɵviewQuery(MatSort, 5);\n      i0.ɵɵviewQuery(MatTable, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.table = _t.first);\n    }\n  },\n  decls: 17,\n  vars: 13,\n  consts: [[1, \"mat-elevation-z8\", \"small-table\"], [\"mat-table\", \"\", \"matSort\", \"\", \"aria-label\", \"Elements\", 1, \"full-width-table\"], [3, \"colspan\", \"rowspan\"], [\"title\", \"Latest Orders\"], [\"matColumnDef\", \"id\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"name\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"aria-label\", \"Select page\", 3, \"length\", \"pageIndex\", \"pageSize\", \"pageSizeOptions\"], [\"paginator\", \"\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function OrdersTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"table\", 1);\n      i0.ɵɵelementStart(2, \"mat-grid-tile\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵelementStart(5, \"app-card\", 3);\n      i0.ɵɵelement(6, \"app-orders-table\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementContainerStart(7, 4);\n      i0.ɵɵtemplate(8, OrdersTableComponent_th_8_Template, 2, 0, \"th\", 5);\n      i0.ɵɵtemplate(9, OrdersTableComponent_td_9_Template, 2, 1, \"td\", 6);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(10, 7);\n      i0.ɵɵtemplate(11, OrdersTableComponent_th_11_Template, 2, 0, \"th\", 5);\n      i0.ɵɵtemplate(12, OrdersTableComponent_td_12_Template, 2, 1, \"td\", 6);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(13, OrdersTableComponent_tr_13_Template, 1, 0, \"tr\", 8);\n      i0.ɵɵtemplate(14, OrdersTableComponent_tr_14_Template, 1, 0, \"tr\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"mat-paginator\", 10, 11);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      let tmp_0_0;\n      let tmp_1_0;\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"colspan\", (tmp_0_0 = i0.ɵɵpipeBind1(3, 8, ctx.cardLayout)) == null ? null : tmp_0_0.table == null ? null : tmp_0_0.table.cols)(\"rowspan\", (tmp_1_0 = i0.ɵɵpipeBind1(4, 10, ctx.cardLayout)) == null ? null : tmp_1_0.table == null ? null : tmp_1_0.table.rows);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"length\", ctx.dataSource == null ? null : ctx.dataSource.data == null ? null : ctx.dataSource.data.length)(\"pageIndex\", 0)(\"pageSize\", 10)(\"pageSizeOptions\", i0.ɵɵpureFunction0(12, _c0));\n    }\n  },\n  directives: [i1.MatTable, i2.MatSort, i3.MatGridTile, i4.CardComponent, OrdersTableComponent, i1.MatColumnDef, i1.MatHeaderCellDef, i1.MatCellDef, i1.MatHeaderRowDef, i1.MatRowDef, i5.MatPaginator, i1.MatHeaderCell, i2.MatSortHeader, i1.MatCell, i1.MatHeaderRow, i1.MatRow],\n  pipes: [i6.AsyncPipe],\n  styles: [\".full-width-table[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.small-table[_ngcontent-%COMP%] {\\n  overflow-x: scroll !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yZGVycy10YWJsZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLDZCQUFBO0FBQ0YiLCJmaWxlIjoib3JkZXJzLXRhYmxlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZ1bGwtd2lkdGgtdGFibGUge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnNtYWxsLXRhYmxle1xuICBvdmVyZmxvdy14OiBzY3JvbGwgIWltcG9ydGFudDtcbn0iXX0= */\"]\n});","map":{"version":3,"sources":["/home/giovanni/Documents/frontend/front/src/app/pages/orders-table/orders-table.component.ts","/home/giovanni/Documents/frontend/front/src/app/pages/orders-table/orders-table.component.html"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable } from '@angular/material/table';\nimport { OrdersTableDataSource, OrdersTableItem } from './orders-table-datasource';\n\n@Component({\n  selector: 'app-orders-table',\n  templateUrl: './orders-table.component.html',\n  styleUrls: ['./orders-table.component.scss']\n})\nexport class OrdersTableComponent implements AfterViewInit {\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatTable) table!: MatTable<OrdersTableItem>;\n  dataSource: OrdersTableDataSource;\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['id', 'name'];\n\n  constructor() {\n    this.dataSource = new OrdersTableDataSource();\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.table.dataSource = this.dataSource;\n  }\n}\n","<div class=\"mat-elevation-z8 small-table\">\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\">\n    <mat-grid-tile [colspan]=\"( cardLayout | async )?.table?.cols\" [rowspan]=\"( cardLayout | async )?.table?.rows\">\n      <app-card title=\"Latest Orders\">\n        <app-orders-table></app-orders-table>\n      </app-card>\n   </mat-grid-tile>\n    <!-- Id Column -->\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.name}}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator #paginator\n      [length]=\"dataSource?.data?.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"10\"\n      [pageSizeOptions]=\"[5, 10, 20]\"\n      aria-label=\"Select page\">\n  </mat-paginator>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}